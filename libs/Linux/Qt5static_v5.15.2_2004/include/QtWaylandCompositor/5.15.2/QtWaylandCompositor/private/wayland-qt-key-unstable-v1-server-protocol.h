/* Generated by wayland-scanner 1.18.0 */

#ifndef QT_KEY_UNSTABLE_V1_SERVER_PROTOCOL_H
#define QT_KEY_UNSTABLE_V1_SERVER_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-server-core.h"

#ifdef  __cplusplus
extern "C" {
#endif

struct wl_client;
struct wl_resource;

/**
 * @page page_qt_key_unstable_v1 The qt_key_unstable_v1 protocol
 * @section page_ifaces_qt_key_unstable_v1 Interfaces
 * - @subpage page_iface_zqt_key_v1 - send serialized QKeyEvents
 * @section page_copyright_qt_key_unstable_v1 Copyright
 * <pre>
 *
 * Copyright (C) 2018 The Qt Company Ltd.
 * Contact: http://www.qt.io/licensing/
 *
 * This file is part of the plugins of the Qt Toolkit.
 *
 * $QT_BEGIN_LICENSE:BSD$
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in
 * the documentation and/or other materials provided with the
 * distribution.
 * * Neither the name of The Qt Company Ltd nor the names of its
 * contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * $QT_END_LICENSE$
 * </pre>
 */
struct wl_surface;
struct zqt_key_v1;

/**
 * @page page_iface_zqt_key_v1 zqt_key_v1
 * @section page_iface_zqt_key_v1_desc Description
 *
 * This protocol is independent of the Wayland seat concept. Its
 * intention is to let a QKeyEvent be transferred from a Qt compositor
 * to a Qt client without losing or adding false information by going
 * through wl_seat and wl_keyboard.
 *
 * Note: This protocol is considered private to Qt. We will do our
 * best to bump version numbers when we make backwards compatible
 * changes, bump the protocol name and interface suffixes when we make
 * backwards incompatible changes, but we provide no guarantees. We
 * may also remove the protocol without warning. Implement this at
 * your own risk.
 * @section page_iface_zqt_key_v1_api API
 * See @ref iface_zqt_key_v1.
 */
/**
 * @defgroup iface_zqt_key_v1 The zqt_key_v1 interface
 *
 * This protocol is independent of the Wayland seat concept. Its
 * intention is to let a QKeyEvent be transferred from a Qt compositor
 * to a Qt client without losing or adding false information by going
 * through wl_seat and wl_keyboard.
 *
 * Note: This protocol is considered private to Qt. We will do our
 * best to bump version numbers when we make backwards compatible
 * changes, bump the protocol name and interface suffixes when we make
 * backwards incompatible changes, but we provide no guarantees. We
 * may also remove the protocol without warning. Implement this at
 * your own risk.
 */
extern const struct wl_interface zqt_key_v1_interface;

#define ZQT_KEY_V1_KEY 0

/**
 * @ingroup iface_zqt_key_v1
 */
#define ZQT_KEY_V1_KEY_SINCE_VERSION 1


/**
 * @ingroup iface_zqt_key_v1
 * Sends an key event to the client owning the resource.
 * @param resource_ The client's resource
 */
static inline void
zqt_key_v1_send_key(struct wl_resource *resource_, struct wl_resource *surface, uint32_t time, uint32_t type, uint32_t key, uint32_t modifiers, uint32_t nativeScanCode, uint32_t nativeVirtualKey, uint32_t nativeModifiers, const char *text, uint32_t autorepeat, uint32_t count)
{
	wl_resource_post_event(resource_, ZQT_KEY_V1_KEY, surface, time, type, key, modifiers, nativeScanCode, nativeVirtualKey, nativeModifiers, text, autorepeat, count);
}

#ifdef  __cplusplus
}
#endif

#endif
